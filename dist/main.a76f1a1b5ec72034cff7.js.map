{"version":3,"sources":["webpack://weather-app/./src/index.js","webpack://weather-app/./src/js/weather.js","webpack://weather-app/./src/js/forecast.js"],"names":["city","document","querySelector","btn","alert","temp","unit","icon","location","description","table","units","cent","far","convertUnits","to","allVar","querySelectorAll","forEach","item","textContent","toFixed","addEventListener","async","cityValue","value","unitValue","classList","contains","style","display","info","currentWeather","fetch","mode","status","currentWeatherJson","json","name","sys","country","main","weather","humidity","console","log","statusText","getWeather","src","innerHTML","forecastInfo","forecast","forecastJson","list","forecastWeather","rows","removeChild","element","cleanTable","row","weatherInfo","createElement","i","data","add","appendChild","makeRow","dt_txt","slice","popullateTable","toggle"],"mappings":"mBA6CA,IAAIA,EAAOC,SAASC,cAAc,SAC9BC,EAAMF,SAASC,cAAc,gBAC7BE,EAAQH,SAASC,cAAc,UAC/BG,EAAOJ,SAASC,cAAc,SAC9BI,EAAOL,SAASC,cAAc,SAC9BK,EAAON,SAASC,cAAc,SAC9BM,EAAWP,SAASC,cAAc,aAClCO,EAAcR,SAASC,cAAc,gBACrCQ,EAAQT,SAASC,cAAc,SAC/BS,EAAQV,SAASC,cAAc,UAC/BU,EAAQ,UACRC,EAAO,UAwFX,SAASC,EAAaC,GACpB,IAAIC,EAAS,IAAIf,SAASgB,iBAAiB,SACjC,WAANF,EACFC,EAAOE,SAAQC,IACbA,EAAKC,eAAkBD,EAAKC,YAAc,IAAM,KAAKC,QAAQ,MAG/DL,EAAOE,SAAQC,IACbA,EAAKC,aAAgB,KAAOD,EAAKC,YAAc,IAAIC,QAAQ,MA/FjElB,EAAImB,iBAAiB,SAkBrBC,iBACE,IAAIC,EAAYxB,EAAKyB,MAAQzB,EAAKyB,MAAQ,GACtCC,EAAYf,EAAMgB,UAAUC,SAAS,aAAe,WAAa,SACrE,GAAiB,KAAdJ,EACDpB,EAAMgB,YAAc,eACpBhB,EAAMyB,MAAMC,QAAU,YACjB,CACL,IAAIC,QClFRR,eAA0BZ,EAAOX,GAC/B,IAAIgC,QAAuBC,MAAO,qDAAoDjC,WAAcW,2CAAgD,CAClJuB,KAAM,SAGR,GAA8B,MAA1BF,EAAeG,OAAiB,CAElC,IAAIC,QAA2BJ,EAAeK,OAE9C,MAAO,CACLD,EAAmBE,KACnBF,EAAmBG,IAAIC,QACvBJ,EAAmBK,KAAKpC,KACxB+B,EAAmBM,QAAQ,GAAGjC,YAC9B2B,EAAmBM,QAAQ,GAAGnC,KAC9B6B,EAAmBK,KAAKE,UAErB,GAA6B,KAAzBX,EAAeG,OAExB,OADAS,QAAQC,IAAIb,EAAec,YACpBd,EAAec,WD+DLC,CAAWrB,EAAWF,GACvC,GAAa,cAATO,EACF3B,EAAMgB,YAAc,iBACpBhB,EAAMyB,MAAMC,QAAU,YACjB,CACL1B,EAAMyB,MAAMC,QAAU,OACtBzB,EAAKe,YAAcW,EAAK,GACxBxB,EAAKyC,IAAO,oCAAmCjB,EAAK,SACpDvB,EAASY,YAAe,GAAEW,EAAK,OAAOA,EAAK,KAC3CzB,EAAK2C,UAA0B,WAAdvB,EAAyBd,EAAOC,EACjDJ,EAAYW,YAAe,GAAEW,EAAK,KAClC,IAAImB,QE7FV3B,eAA+BZ,EAAOX,GACpC,IAAImD,QAAiBlB,MAAO,sDAAqDjC,WAAcW,2CAAgD,CAC7IuB,KAAM,SAGR,GAAwB,MAApBiB,EAAShB,OAAiB,CAE5B,IAAIiB,QAAqBD,EAASd,OAclC,OAbAO,QAAQC,IAAIO,EAAaC,MACzBT,QAAQC,IAAIO,EAAaC,KAAK,IAC9BT,QAAQC,IAAIO,EAAaC,KAAK,KAC9BT,QAAQC,IAAIO,EAAaC,KAAK,KAC9BT,QAAQC,IAAIO,EAAaC,KAAK,KAC9BT,QAAQC,IAAIO,EAAaC,KAAK,KAQvB,CACLD,EAAaC,KAAK,GAClBD,EAAaC,KAAK,IAClBD,EAAaC,KAAK,IAClBD,EAAaC,KAAK,IAClBD,EAAaC,KAAK,KAEf,GAAuB,KAAnBF,EAAShB,OAElB,OADAS,QAAQC,IAAIM,EAASL,YACdK,EAASL,WF+DWQ,CAAgB5B,EAAWF,GACpDoB,QAAQC,IAAIK,GAOlB,SAAwBnB,IAkCxBR,iBACEqB,QAAQC,IAAInC,GACZ,IAAI6C,QAAa7C,EAAMO,iBAAiB,aACxC2B,QAAQC,IAAIU,GACZA,EAAKrC,SAAQK,gBACLb,EAAM8C,YAAYC,OAtC1BC,GACA3B,EAAKb,SAAQC,IACX,IAAIwC,EAUR,SAAiBC,GACf,IAAID,EAAM1D,SAAS4D,cAAc,MACjC,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAO9D,SAAS4D,cAAc,MACzB,IAANC,EACDC,EAAK3C,YAAcwC,EAAYE,IAE/BC,EAAO9D,SAAS4D,cAAc,OAC9BE,EAAKf,IAAO,oCAAmCY,EAAY,UAGlD,IAANE,GACHC,EAAKpC,UAAUqC,IAAI,OAGrBL,EAAIhC,UAAUqC,IAAI,YAClBL,EAAIM,YAAYF,GAElB,OAAOJ,EA5BKO,CAAQ,CAChB/C,EAAKgD,OAAOC,MAAM,EAAE,IACpBjD,EAAKsB,KAAKpC,KACVc,EAAKuB,QAAQ,GAAGnC,KAChBY,EAAKuB,QAAQ,GAAGjC,cAElBC,EAAMuD,YAAYN,MAfhBU,CAAenB,GAEjBN,QAAQC,IAAId,OAvChBpB,EAAMW,iBAAiB,SAIvB,WACKX,EAAMgB,UAAUC,SAAS,cAC1BtB,EAAK2C,UAAYrC,EACjBE,EAAa,aAEbR,EAAK2C,UAAYpC,EACjBC,EAAa,cAEfH,EAAMT,cAAc,MAAMyB,UAAU2C,OAAO,UAC3C3D,EAAMT,cAAc,MAAMyB,UAAU2C,OAAO,UAC3C3D,EAAMgB,UAAU2C,OAAO,gBAZzB3D,EAAMT,cAAc,MAAMyB,UAAUqC,IAAI,W","file":"main.a76f1a1b5ec72034cff7.js","sourcesContent":["import './css/style.scss'\r\n// import './static/weather.png'\r\nimport { getWeather } from './js/weather'\r\nimport { forecastWeather } from  './js/forecast'\r\n// let d = new Date()\r\n// console.log(d.getTime())\r\n// let b = new Date(1620078781 * 1000)\r\n// let c = new Date(1620077916472)\r\n\r\n// console.log(d);\r\n// console.log(b);\r\n// let image = document.querySelector('.image')\r\n// let str = document.querySelector('.search-string')\r\n// let btn1 = document.querySelector('.btn1')\r\n// btn1.addEventListener('click', getInfo)\r\n\r\n// async function f() { \r\n//   let forecastWeather = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=cusco&appid=a5d5560ee39e3fe746c3741ca01c482c`, {\r\n//     mode: 'cors'\r\n//   })\r\n//   console.log(forecastWeather);\r\n//   let currentWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=cusco&appid=a5d5560ee39e3fe746c3741ca01c482c`)\r\n//   let currentWeatherJson = await currentWeather.json()\r\n//   console.log(currentWeatherJson);\r\n// }\r\n\r\n\r\n// async function getInfo() {\r\n//   let v = str.value ? str.value : 'dog';\r\n  \r\n//   let gif = await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=eV6eFDqCpNshpe0Rs65AKQkIOu9BKPO0&s=${v}`, {\r\n//     mode: 'cors'\r\n//   })\r\n  \r\n//   let gifResponse = await gif.json()\r\n  \r\n  \r\n//   console.log(gifResponse.data.images.original.url);\r\n//   image.src = gifResponse.data.images.original.url\r\n// }\r\n\r\n// f()\r\n// getInfo()\r\n\r\n\r\nlet city = document.querySelector('.city')\r\nlet btn = document.querySelector('.weather-btn')\r\nlet alert = document.querySelector('.alert')\r\nlet temp = document.querySelector('.temp')\r\nlet unit = document.querySelector('.unit')\r\nlet icon = document.querySelector('.icon')\r\nlet location = document.querySelector('.location')\r\nlet description = document.querySelector('.description')\r\nlet table = document.querySelector('table')\r\nlet units = document.querySelector('.units')\r\nlet cent = `&#x2103`\r\nlet far = `&#x2109`\r\nbtn.addEventListener('click', showResponse)\r\nunits.addEventListener('click', updateUnits)\r\n\r\nunits.querySelector('.c').classList.add('active');\r\n\r\nfunction updateUnits() {\r\n  if(units.classList.contains('farenheit')) {\r\n    unit.innerHTML = cent\r\n    convertUnits('celcius')\r\n  } else {\r\n    unit.innerHTML = far\r\n    convertUnits('farenheit')\r\n  }\r\n  units.querySelector('.c').classList.toggle('active');\r\n  units.querySelector('.f').classList.toggle('active');\r\n  units.classList.toggle('farenheit')\r\n}\r\n\r\nasync function showResponse() {\r\n  let cityValue = city.value ? city.value : '';\r\n  let unitValue = units.classList.contains('farenheit') ? 'imperial' : 'metric';\r\n  if(cityValue === '') {\r\n    alert.textContent = 'enter a city'\r\n    alert.style.display = 'block'\r\n  } else {\r\n    let info = await getWeather(unitValue, cityValue)\r\n    if (info === 'Not Found') {\r\n      alert.textContent = 'city not found'\r\n      alert.style.display = 'block'\r\n    } else {\r\n      alert.style.display = 'none'\r\n      temp.textContent = info[2]\r\n      icon.src = `http://openweathermap.org/img/wn/${info[4]}.png`\r\n      location.textContent = `${info[0]}, ${info[1]}`\r\n      unit.innerHTML = unitValue === 'metric' ? cent : far;\r\n      description.textContent = `${info[3]}`\r\n      let forecastInfo = await forecastWeather(unitValue, cityValue)\r\n      console.log(forecastInfo);\r\n      popullateTable(forecastInfo)\r\n    }\r\n    console.log(info);\r\n  }\r\n}\r\n\r\nfunction popullateTable(info) {\r\n  cleanTable()\r\n  info.forEach(item => {\r\n    let row = makeRow([\r\n      item.dt_txt.slice(5,10), \r\n      item.main.temp, \r\n      item.weather[0].icon,\r\n      item.weather[0].description,\r\n    ])\r\n    table.appendChild(row)\r\n  })\r\n}\r\n\r\nfunction makeRow(weatherInfo) {\r\n  let row = document.createElement('tr')\r\n  for (let i = 0; i < 4; i++) {\r\n    let data = document.createElement('td')\r\n    if(i !== 2) {\r\n      data.textContent = weatherInfo[i]\r\n    } else {\r\n      data = document.createElement('img')\r\n      data.src = `http://openweathermap.org/img/wn/${weatherInfo[2]}.png`\r\n    }\r\n\r\n    if ( i === 1 ) {\r\n      data.classList.add('var')\r\n    }\r\n\r\n    row.classList.add('data-row')\r\n    row.appendChild(data)\r\n  }\r\n  return row\r\n}\r\n\r\nasync function cleanTable() {\r\n  console.log(table);\r\n  let rows = await table.querySelectorAll('.data-row')\r\n  console.log(rows);\r\n  rows.forEach(async element => {\r\n    await table.removeChild(element)\r\n  });\r\n}\r\n\r\nfunction convertUnits(to) {\r\n  let allVar = [...document.querySelectorAll('.var')] \r\n  if (to == 'celcius') {\r\n    allVar.forEach(item => {\r\n      item.textContent  = ((+item.textContent - 32) / 1.8).toFixed(2)\r\n    })    \r\n  } else {\r\n    allVar.forEach(item => {\r\n      item.textContent  = (1.8 * +item.textContent + 32).toFixed(2)\r\n    })\r\n  }\r\n}","async function getWeather(units, city) {\r\n  let currentWeather = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${units}&appid=a5d5560ee39e3fe746c3741ca01c482c`, {\r\n    mode: 'cors'\r\n  })\r\n\r\n  if( currentWeather.status === 200 ) { \r\n\r\n    let currentWeatherJson = await currentWeather.json()    \r\n\r\n    return [\r\n      currentWeatherJson.name, \r\n      currentWeatherJson.sys.country, \r\n      currentWeatherJson.main.temp, \r\n      currentWeatherJson.weather[0].description, \r\n      currentWeatherJson.weather[0].icon, \r\n      currentWeatherJson.main.humidity]\r\n\r\n  } else if (currentWeather.status == 404 ) {\r\n    console.log(currentWeather.statusText);\r\n    return currentWeather.statusText\r\n  }\r\n}\r\n\r\nexport {\r\n  getWeather\r\n}","async function forecastWeather(units, city) {\r\n  let forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${units}&appid=a5d5560ee39e3fe746c3741ca01c482c`, {\r\n    mode: 'cors'\r\n  })\r\n\r\n  if( forecast.status === 200 ) { \r\n\r\n    let forecastJson = await forecast.json()    \r\n    console.log(forecastJson.list);\r\n    console.log(forecastJson.list[5]);\r\n    console.log(forecastJson.list[13]);\r\n    console.log(forecastJson.list[21]);\r\n    console.log(forecastJson.list[29]);\r\n    console.log(forecastJson.list[37]);\r\n    // return [\r\n    //   forecastJson.name, \r\n    //   forecastJson.sys.country, \r\n    //   forecastJson.main.temp, \r\n    //   forecastJson.weather[0].description, \r\n    //   forecastJson.weather[0].icon, \r\n    //   forecastJson.main.humidity]\r\n    return [\r\n      forecastJson.list[3],\r\n      forecastJson.list[13],\r\n      forecastJson.list[21],\r\n      forecastJson.list[29],\r\n      forecastJson.list[37]\r\n    ]\r\n  } else if (forecast.status == 404 ) {\r\n    console.log(forecast.statusText);\r\n    return forecast.statusText\r\n  }\r\n}\r\n\r\n// forecastWeather('cusco')\r\n\r\nexport {\r\n  forecastWeather\r\n}"],"sourceRoot":""}